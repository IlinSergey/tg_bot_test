import logging
from config import TG_API_KEY
from weather import get_weather
from images import get_image
from exchange import change_money

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext


logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log",
    level=logging.INFO,
)

help_commands = '''
<b>/start</b> - <em>–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º</em>
<b>/help</b> - <em>–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã</em>
<b>/weather</b> - <em>–ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ</em>
<b>/photo</b> - <em>–ø–æ–ª—É—á–∏—Ç—å –∑–∞–±–∞–≤–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ</em>
<b>/exchange</b> - <em>–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã</em>
<b>/quiz</b> - <em>—Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å</em>
'''


popular_currencies = '''
<b>USD</b> - <em>–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä</em>
<b>EUR</b> - <em>–ï–≤—Ä–æ</em>
<b>RUB</b> - <em>–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å</em>
<b>GBP</b> - <em>–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤</em>
<b>CHF</b> - <em>–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫</em>
<b>JPY</b> - <em>–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞</em>
<b>CNY</b> - <em>–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å</em>
'''


srorage = MemoryStorage()
bot = Bot(token=TG_API_KEY)
dp = Dispatcher(bot, storage=MemoryStorage())


class Weather(StatesGroup):
    city = State()


class Exchange(StatesGroup):
    currency = State()
    target_currency = State()
    amount = State()


keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton('/weather'),
             KeyboardButton('/exchange'),
             KeyboardButton('/photo'),
             KeyboardButton('/quiz'),
             KeyboardButton('/help')
             )


@dp.message_handler(commands=['start'])
async def greet_user(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç!\n–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n{help_commands}',
                         parse_mode='HTML', reply_markup=keyboard)
    await message.delete()


@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await message.answer(help_commands, parse_mode='HTML')
    await message.delete()


@dp.message_handler(commands=['weather'])
async def weather(message: types.Message):
    await message.reply('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ–≥–æ–¥–∞?')
    await Weather.city.set()


@dp.message_handler(state=Weather.city)
async def weather_on_city(message: types.Message, state: FSMContext):
    city = message.text
    weather = await get_weather(city)
    await message.reply(weather)
    await state.finish()


@dp.message_handler(commands=['exchange'])
async def exchange(message: types.Message):
    await message.reply(f'–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –º–µ–Ω—è–µ–º?\n–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ:\n{popular_currencies}',
                        parse_mode='HTML')
    await Exchange.currency.set()


@dp.message_handler(state=Exchange.currency)
async def set_currency(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['currency'] = message.text
    await message.reply('–ù–∞ –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –º–µ–Ω—è–µ–º?')
    await Exchange.next()


@dp.message_handler(state=Exchange.target_currency)
async def set_turget_currency(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['target_currency'] = message.text
    await message.reply('–°–∫–æ–ª—å–∫–æ –º–µ–Ω—è–µ–º?')
    await Exchange.next()


@dp.message_handler(state=Exchange.amount)
async def set_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['amount'] = message.text
    result = await change_money(currency=data['currency'],
                                target_currency=data['target_currency'],
                                amount=data['amount'])
    result = round(result, 2)
    await message.reply(f'{result} {data["target_currency"]}')
    await state.finish()


@dp.message_handler(commands=['photo'])
async def send_image(message: types.Message):
    photo = await get_image('funny animal')
    await bot.send_photo(chat_id=message.chat.id,
                         photo=photo, caption='–°–º–æ—Ç—Ä–∏ –∫–∞–∫–∞—è –∑–≤–µ—Ä—é—à–∫–∞!üêæ')
    await message.delete()


@dp.message_handler(commands=['quiz'])
async def make_quiz(message: types.Message):
    pass


@dp.message_handler()
async def echo(message: types.Message):
    await message.answer(message.text)


if __name__ == '__main__':
    logging.info("–ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª")
    executor.start_polling(dp, skip_updates=True)
