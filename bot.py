import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext


from config import TG_API_KEY
from exchange import change_money
from exchange_symbols import support_exchange_symbols
from images import get_image

from utils import (help_commands, popular_currencies, keyboard,
                   keyboard_cancel, keyboard_quiz, Exchange, Quiz, Weather)
from weather import get_weather

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log",
    level=logging.INFO,
)


srorage = MemoryStorage()
bot = Bot(token=TG_API_KEY)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def greet_user(message: types.Message):
    ''' –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö'''
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'–ü—Ä–∏–≤–µ—Ç!\n–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n{help_commands}',
                           parse_mode='HTML', reply_markup=keyboard)
    await message.delete()


@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    ''' –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥'''
    await bot.send_message(chat_id=message.from_user.id,
                           text=help_commands, parse_mode='HTML')
    await message.delete()


@dp.message_handler(commands=['cancel'], state='*')
async def command_cancel(message: types.Message, state: FSMContext):
    ''' –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥,
        –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤'''
    if state is None:
        return
    await state.finish()
    await message.reply('–ö–æ–º–º–∞–Ω–¥–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞!', reply_markup=keyboard)


# –ë–ª–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
@dp.message_handler(commands=['weather'])
async def weather(message: types.Message):
    '''–û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–º–∞–Ω–¥—É /weather, –Ω–∏—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
    –≥–æ—Ä–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã'''
    await message.reply('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ–≥–æ–¥–∞?',
                        reply_markup=keyboard_cancel)
    await Weather.city.set()


@dp.message_handler(state=Weather.city)
async def weather_on_city(message: types.Message, state: FSMContext):
    '''–û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ'''
    city = message.text
    weather = await get_weather(city)
    await message.reply(weather, reply_markup=keyboard)
    await state.finish()


# –ë–ª–æ–∫ –∫–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–∞–Ω–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
@dp.message_handler(commands=['exchange'])
async def exchange(message: types.Message):
    '''–û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–º–∞–Ω–¥—É /exchange, –Ω–∏—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
    —Ç–µ–∫—É—â—É—é –≤–∞–ª—é—Ç—É'''
    await message.reply(f'–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –º–µ–Ω—è–µ–º?\n–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ:\n{popular_currencies}',
                        parse_mode='HTML',
                        reply_markup=keyboard_cancel)
    await Exchange.currency.set()


@dp.message_handler(lambda message: (message.text).upper() not in support_exchange_symbols,
                    state=Exchange.currency)
async def check_currency(message: types.Message):
    '''–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç'''
    await message.reply('–î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')


@dp.message_handler(state=Exchange.currency)
async def set_currency(message: types.Message, state: FSMContext):
    '''–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É'''
    async with state.proxy() as data:
        data['currency'] = message.text
    await message.reply('–ù–∞ –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –º–µ–Ω—è–µ–º?', reply_markup=keyboard_cancel)
    await Exchange.next()


@dp.message_handler(lambda message: (message.text).upper() not in support_exchange_symbols,
                    state=Exchange.target_currency)
async def check_target_currency(message: types.Message):
    '''–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç'''
    await message.reply('–î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')


@dp.message_handler(state=Exchange.target_currency)
async def set_turget_currency(message: types.Message, state: FSMContext):
    '''–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—É—â–µ–π –≤–∞–ª—é—Ç—ã'''
    async with state.proxy() as data:
        data['target_currency'] = message.text
    await message.reply('–°–∫–æ–ª—å–∫–æ –º–µ–Ω—è–µ–º?', reply_markup=keyboard_cancel)
    await Exchange.next()


@dp.message_handler(lambda message: not message.text.isdigit() or int(message.text) < 1,
                    state=Exchange.amount)
async def check_amount(message: types.Message):
    '''–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'''
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ–Ω–æ –±–æ–ª—å—à–µ 0!')


@dp.message_handler(state=Exchange.amount)
async def set_amount(message: types.Message, state: FSMContext):
    '''–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–º–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥'''
    async with state.proxy() as data:
        data['amount'] = message.text
    result = await change_money(currency=data['currency'],
                                target_currency=data['target_currency'],
                                amount=data['amount'])
    result = round(result, 2)
    await message.reply(f'{result} {data["target_currency"]}', reply_markup=keyboard)
    await state.finish()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–π, –∑–∞–±–∞–≤–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏
@dp.message_handler(commands=['photo'])
async def send_image(message: types.Message):
    '''–û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–º–∞–Ω–¥—É /photo, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º —Å–µ—Ä–≤–∏—Å–µ —Ñ–æ—Ç–æ —Å –∑–∞–±–∞–≤–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º
    –∏ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'''
    photo = await get_image('funny animal')
    await bot.send_photo(chat_id=message.chat.id,
                         photo=photo, caption='–°–º–æ—Ç—Ä–∏ –∫–∞–∫–∞—è –∑–≤–µ—Ä—é—à–∫–∞!üêæ',
                         reply_markup=keyboard)
    await message.delete()


# –ë–ª–æ–∫ –∫–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–æ–≤ (polls)
@dp.message_handler(commands=['quiz'])
async def quiz(message: types.Message):
    '''–û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–º–∞–Ω–¥—É /quiz, –Ω–∏—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞'''
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å: ', reply_markup=keyboard_cancel)
    await Quiz.question.set()


@dp.message_handler(state=Quiz.question)
async def quiz_question(message: types.Message, state=FSMContext):
    '''–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞'''
    async with state.proxy() as data:
        data['question'] = message.text
        data['options'] = []
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞', reply_markup=keyboard_cancel)
    await Quiz.next()


@dp.message_handler(commands=['end'], state=Quiz.option)
async def quiz_end(message: types.Message, state=FSMContext):
    '''–ö–æ–º–º–∞–Ω–¥–∞ –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–º–∞–Ω–¥—É /end –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞,
    —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å –≤ —á–∞—Ç'''
    async with state.proxy() as data:
        question = data['question']
        options = data['options']
    await bot.send_poll(chat_id=message.chat.id,
                        question=question,
                        options=options,
                        is_anonymous=False,
                        reply_markup=keyboard)
    await state.finish()


@dp.message_handler(state=Quiz.option)
async def quiz_option(message: types.Message, state=FSMContext):
    '''–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ–ø—Ä–æ—Å–∞, —Ñ—É–Ω–∫—Ü–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã,
    –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–º–º–∞–Ω–¥—É /end, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ —Ä–∞–Ω–µ–µ'''
    async with state.proxy() as data:
        data['options'].append(message.text)
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤–≤–æ–¥',
                        reply_markup=keyboard_quiz)


if __name__ == '__main__':
    logging.info("–ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª")
    executor.start_polling(dp, skip_updates=True)
